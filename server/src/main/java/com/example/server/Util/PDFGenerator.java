package com.example.server.Util;

import com.example.server.constant.PaymentConstant;
import com.example.server.entity.*;
import com.example.server.service.GiaoHang.AddressCache;
import com.itextpdf.barcodes.BarcodeQRCode;
import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Component
@RequiredArgsConstructor
public class PDFGenerator {
    private static final String SHOP_NAME = "4BEE SHOP";
    private static final String SHOP_ADDRESS = "S·ªë 1,H·∫ªm 132/52/3 ƒê∆∞·ªùng C·∫ßu Di·ªÖn, T·ªï D√¢n Ph·ªë Nguy√™n X√° 22";
    private static final String SHOP_PHONE = "0123456789";
    private static final String SHOP_EMAIL = "4beeshop@gmail.com";
    private final AddressCache addressCache;

    public byte[] generateInvoicePDF(HoaDon hoaDon) {
        validateInvoiceData(hoaDon);

        try {
            String tempFile = "invoice_" + hoaDon.getId() + ".pdf";
            PdfWriter writer = new PdfWriter(tempFile);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // Set up font
            InputStream fontStream = getClass().getResourceAsStream("/fonts/NotoSans-VariableFont_wdth,wght.ttf");
            if (fontStream == null) {
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y font file");
            }
            PdfFont font = PdfFontFactory.createFont(
                    IOUtils.toByteArray(fontStream),
                    PdfEncodings.IDENTITY_H
            );
            document.setFont(font);

            // Calculate all amounts first
            InvoiceAmounts amounts = calculateInvoiceAmounts(hoaDon);

            // Add content
            addQRCode(document, hoaDon.getMaHoaDon());
            addInvoiceDetails(document, hoaDon);

            addCustomerInfo(document, hoaDon);  // üëà Ch·ªânh s·ª≠a ph·∫ßn hi·ªÉn th·ªã ƒë·ªãa ch·ªâ
            addProductsTable(document, hoaDon.getHoaDonChiTiets());
            addPaymentSummary(document, hoaDon, amounts);

            document.close();
            byte[] pdfContent = Files.readAllBytes(Paths.get(tempFile));
            Files.delete(Paths.get(tempFile));
            return pdfContent;

        } catch (Exception e) {
            log.error("Error generating PDF for invoice {}: ", hoaDon.getId(), e);
            throw new RuntimeException("L·ªói khi t·∫°o PDF h√≥a ƒë∆°n", e);
        }
    }

    //Th√™m m√£ QR
    private void addQRCode(Document document, String maHoaDon) {
        Table table = new Table(new float[]{2, 1}); // B·∫£ng 2 c·ªôt: th√¥ng tin c·ª≠a h√†ng | m√£ QR
        table.setWidth(UnitValue.createPercentValue(100));

        // C·ªôt 1: Th√¥ng tin c·ª≠a h√†ng
        Cell shopInfoCell = new Cell()
                .add(new Paragraph(SHOP_NAME).setFontSize(16).setBold())
                .add(new Paragraph("ƒê·ªãa ch·ªâ: " + SHOP_ADDRESS))
                .add(new Paragraph("SƒêT: " + SHOP_PHONE))
                .add(new Paragraph("Email: " + SHOP_EMAIL))
                .setBorder(null)
                .setTextAlignment(TextAlignment.LEFT);
        table.addCell(shopInfoCell);

        // C·ªôt 2: M√£ QR
        BarcodeQRCode qrCode = new BarcodeQRCode(maHoaDon);
        PdfFormXObject qrCodeObject = qrCode.createFormXObject(document.getPdfDocument());
        Image qrImage = new Image(qrCodeObject).setWidth(120).setHeight(120); // K√≠ch th∆∞·ªõc l·ªõn h∆°n

        Cell qrCell = new Cell()
                .add(qrImage)
                .setBorder(null)
                .setTextAlignment(TextAlignment.RIGHT);
        table.addCell(qrCell);

        document.add(table);
        document.add(new Paragraph("\n")); // Th√™m kho·∫£ng c√°ch
    }


    private void addInvoiceDetails(Document document, HoaDon hoaDon) {
        document.add(new Paragraph("H√ìA ƒê∆†N B√ÅN H√ÄNG")
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(20)
                .setBold());
        document.add(new Paragraph("M√£ h√≥a ƒë∆°n: " + hoaDon.getMaHoaDon()));
        document.add(new Paragraph("Ng√†y t·∫°o: " +
                hoaDon.getNgayTao().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))));
        document.add(new Paragraph("\n"));
    }

    private void addCustomerInfo(Document document, HoaDon hoaDon) {
        document.add(new Paragraph("TH√îNG TIN KH√ÅCH H√ÄNG")
                .setBold()
                .setFontSize(14));
        Table table = new Table(new float[]{1, 4});
        table.setWidth(UnitValue.createPercentValue(100));

        // X√°c ƒë·ªãnh t√™n kh√°ch h√†ng hi·ªÉn th·ªã
        String tenHienThi = "Kh√°ch h√†ng l·∫ª";
        boolean isUnnamedCustomer = false;

        // N·∫øu kh√°ch h√†ng l·∫ª ƒë√£ nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n
        if (hoaDon.getTenNguoiNhan() != null && !hoaDon.getTenNguoiNhan().trim().isEmpty()
                && !hoaDon.getTenNguoiNhan().equalsIgnoreCase("Kh√°ch h√†ng l·∫ª")) {
            tenHienThi = hoaDon.getTenNguoiNhan().trim();
            isUnnamedCustomer = false;
        } else if (hoaDon.getKhachHang() != null && hoaDon.getKhachHang().getTenKhachHang() != null) {
            // Kh√°ch h√†ng c√≥ t√†i kho·∫£n
            tenHienThi = hoaDon.getKhachHang().getTenKhachHang();
            isUnnamedCustomer = false;
        } else {
            // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ t√™n ng∆∞·ªùi nh·∫≠n
            isUnnamedCustomer = true;
        }

        table.addCell(createCell("T√™n kh√°ch h√†ng:", true).setBorder(null).setTextAlignment(TextAlignment.LEFT).setPadding(2));
        table.addCell(createCell(tenHienThi, false).setBorder(null).setTextAlignment(TextAlignment.LEFT).setWidth(UnitValue.createPercentValue(75)));

        // Th√™m s·ªë ƒëi·ªán tho·∫°i n·∫øu c√≥
        if (hoaDon.getSoDienThoai() != null && !hoaDon.getSoDienThoai().trim().isEmpty()) {
            table.addCell(createCell("S·ªë ƒëi·ªán tho·∫°i:", true).setBorder(null));
            table.addCell(createCell(hoaDon.getSoDienThoai().trim(), false).setBorder(null));
        }

        // X·ª≠ l√Ω hi·ªÉn th·ªã ƒë·ªãa ch·ªâ
        if (hoaDon.getLoaiHoaDon() == 3) { // Lo·∫°i h√≥a ƒë∆°n giao h√†ng
            String diaChiFormatted = "";
            if (hoaDon.getDiaChi() != null && !hoaDon.getDiaChi().trim().isEmpty()) {
                diaChiFormatted = addressCache.getFormattedDiaChi(hoaDon.getDiaChi());
            }

            if (!diaChiFormatted.isEmpty()) {
                table.addCell(createCell("ƒê·ªãa ch·ªâ giao h√†ng:", true).setBorder(null));
                table.addCell(createCell(diaChiFormatted, false)
                        .setBorder(null)
                        .setTextAlignment(TextAlignment.LEFT)
                        .setWidth(UnitValue.createPercentValue(75))
                        .setPadding(2));
            }
        }

        // Th√™m email n·∫øu c√≥
        if (hoaDon.getEmailNguoiNhan() != null && !hoaDon.getEmailNguoiNhan().trim().isEmpty()) {
            table.addCell(createCell("Email:", true).setBorder(null));
            table.addCell(createCell(hoaDon.getEmailNguoiNhan().trim(), false).setBorder(null));
        }

        // Th√™m ghi ch√∫ n·∫øu c√≥
        if (hoaDon.getGhiChu() != null && !hoaDon.getGhiChu().trim().isEmpty()) {
            table.addCell(createCell("Ghi ch√∫:", true).setBorder(null));
            table.addCell(createCell(hoaDon.getGhiChu().trim(), false).setBorder(null));
        }

        document.add(table);
        document.add(new Paragraph("\n"));
    }
    private void addProductsTable(Document document, List<HoaDonChiTiet> chiTiets) {
        Table table = new Table(new float[]{4, 2, 2, 1, 1, 2, 2, 2});
        table.setWidth(UnitValue.createPercentValue(100));

        // Th√™m ti√™u ƒë·ªÅ b·∫£ng
        table.addHeaderCell(createHeaderCell("S·∫£n ph·∫©m"));
        table.addHeaderCell(createHeaderCell("M√†u s·∫Øc"));
        table.addHeaderCell(createHeaderCell("K√≠ch th∆∞·ªõc"));
        table.addHeaderCell(createHeaderCell("Ch·∫•t li·ªáu"));
        table.addHeaderCell(createHeaderCell("Th∆∞∆°ng hi·ªáu"));
        table.addHeaderCell(createHeaderCell("SL"));
        table.addHeaderCell(createHeaderCell("ƒê∆°n gi√°"));
        table.addHeaderCell(createHeaderCell("Th√†nh ti·ªÅn"));

        // Th√™m s·∫£n ph·∫©m
        for (HoaDonChiTiet chiTiet : chiTiets) {
            SanPhamChiTiet sanPham = chiTiet.getSanPhamChiTiet();

            // S·ª≠ d·ª•ng gi√° t·∫°i th·ªùi ƒëi·ªÉm th√™m v√†o ƒë∆°n h√†ng n·∫øu c√≥
            BigDecimal donGia = chiTiet.getGiaTaiThoiDiemThem() != null ?
                    chiTiet.getGiaTaiThoiDiemThem() :
                    sanPham.getGia();

            BigDecimal thanhTien = donGia.multiply(new BigDecimal(chiTiet.getSoLuong()));

            table.addCell(createCell(sanPham.getSanPham().getTenSanPham(), false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(sanPham.getMauSac() != null ? sanPham.getMauSac().getTenMau() : "Kh√¥ng c√≥", false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(sanPham.getKichThuoc() != null ? sanPham.getKichThuoc().getTenKichThuoc() : "Kh√¥ng c√≥", false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(sanPham.getChatLieu() != null ? sanPham.getChatLieu().getTenChatLieu() : "Kh√¥ng c√≥", false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(sanPham.getThuongHieu() != null ? sanPham.getThuongHieu().getTenThuongHieu() : "Kh√¥ng c√≥", false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(String.valueOf(chiTiet.getSoLuong()), false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(formatCurrency(donGia), false).setTextAlignment(TextAlignment.CENTER));
            table.addCell(createCell(formatCurrency(thanhTien), false).setTextAlignment(TextAlignment.CENTER));
        }

        document.add(table);
        document.add(new Paragraph("\n"));
    }

    private void addPaymentSummary(Document document, HoaDon hoaDon, InvoiceAmounts amounts) {
        document.add(new Paragraph("TH√îNG TIN THANH TO√ÅN")
                .setBold()
                .setFontSize(14));

        Table table = new Table(new float[]{4, 2});
        table.setWidth(UnitValue.createPercentValue(60));
        table.setHorizontalAlignment(com.itextpdf.layout.properties.HorizontalAlignment.RIGHT);

        table.addCell(createCell("T·ªïng ti·ªÅn h√†ng:", true).setBorder(null));
        table.addCell(createCell(formatCurrency(amounts.getTongTienHang()), false)
                .setTextAlignment(TextAlignment.RIGHT)
                .setBorder(null));

        if (amounts.getTienGiamGia().compareTo(BigDecimal.ZERO) > 0) {
            table.addCell(createCell("S·ªë ti·ªÅn gi·∫£m:", true).setBorder(null));
            table.addCell(createCell(formatCurrency(amounts.getTienGiamGia()), false)
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setBorder(null));
        }

        if (amounts.getPhiVanChuyen().compareTo(BigDecimal.ZERO) > 0) {
            table.addCell(createCell("Ph√≠ v·∫≠n chuy·ªÉn:", true).setBorder(null));
            table.addCell(createCell(formatCurrency(amounts.getPhiVanChuyen()), false)
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setBorder(null));
        }

        table.addCell(createCell("T·ªïng thanh to√°n:", true).setBorder(null).setBold());
        table.addCell(createCell(formatCurrency(amounts.getTongThanhToan()), false)
                .setTextAlignment(TextAlignment.RIGHT)
                .setBorder(null)
                .setBold());

        document.add(table);
        document.add(new Paragraph("\n"));
    }

    @Data
    @AllArgsConstructor
    private static class InvoiceAmounts {
        private BigDecimal tongTienHang;
        private BigDecimal tienGiamGia;
        private BigDecimal phiVanChuyen;
        private BigDecimal tongThanhToan;
    }

    private InvoiceAmounts calculateInvoiceAmounts(HoaDon hoaDon) {
        // T√≠nh t·ªïng ti·ªÅn h√†ng
        BigDecimal tongTienHang = hoaDon.getHoaDonChiTiets().stream()
                .map(ct -> {
                    // S·ª≠ d·ª•ng gi√° t·∫°i th·ªùi ƒëi·ªÉm th√™m n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng gi√° c·ªßa s·∫£n ph·∫©m
                    BigDecimal gia = ct.getGiaTaiThoiDiemThem() != null ?
                            ct.getGiaTaiThoiDiemThem() : ct.getSanPhamChiTiet().getGia();
                    return gia.multiply(new BigDecimal(ct.getSoLuong()));
                })
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // T√≠nh ti·ªÅn gi·∫£m gi√°
        BigDecimal tienGiamGia = BigDecimal.ZERO;
        if (hoaDon.getPhieuGiamGia() != null) {
            PhieuGiamGia phieuGiamGia = hoaDon.getPhieuGiamGia();

            if (phieuGiamGia.getGiaTriGiam() != null &&
                    phieuGiamGia.getGiaTriGiam().compareTo(BigDecimal.ZERO) > 0 &&
                    tongTienHang.compareTo(phieuGiamGia.getGiaTriToiThieu()) >= 0) {

                if (phieuGiamGia.getLoaiPhieuGiamGia() == 1) {
                    // Gi·∫£m theo ph·∫ßn trƒÉm
                    tienGiamGia = tongTienHang.multiply(phieuGiamGia.getGiaTriGiam())
                            .divide(new BigDecimal("100"), 2, RoundingMode.HALF_UP);

                    // Gi·ªõi h·∫°n s·ªë ti·ªÅn gi·∫£m t·ªëi ƒëa
                    if (phieuGiamGia.getSoTienGiamToiDa() != null &&
                            tienGiamGia.compareTo(phieuGiamGia.getSoTienGiamToiDa()) > 0) {
                        tienGiamGia = phieuGiamGia.getSoTienGiamToiDa();
                    }
                } else {
                    // Gi·∫£m theo s·ªë ti·ªÅn c·ªë ƒë·ªãnh
                    tienGiamGia = phieuGiamGia.getGiaTriGiam();

                    // ƒê·∫£m b·∫£o kh√¥ng gi·∫£m v∆∞·ª£t qu√° t·ªïng ti·ªÅn h√†ng
                    if (tienGiamGia.compareTo(tongTienHang) > 0) {
                        tienGiamGia = tongTienHang;
                    }
                }
            }
        }
//        L·∫•y ph√≠ v·∫≠n chuy·ªÉn
        BigDecimal phiVanChuyen = hoaDon.getPhiVanChuyen() != null ? hoaDon.getPhiVanChuyen() : BigDecimal.ZERO;

        // T√≠nh t·ªïng thanh to√°n
        BigDecimal tongThanhToan = tongTienHang.add(phiVanChuyen).subtract(tienGiamGia).max(BigDecimal.ZERO);

        return new InvoiceAmounts(tongTienHang, tienGiamGia, phiVanChuyen, tongThanhToan);
    }

    private void validateInvoiceData(HoaDon hoaDon) {
        if (hoaDon == null) {
            throw new IllegalArgumentException("H√≥a ƒë∆°n kh√¥ng th·ªÉ null");
        }

        if (hoaDon.getHoaDonChiTiets() == null || hoaDon.getHoaDonChiTiets().isEmpty()) {
            throw new IllegalArgumentException("H√≥a ƒë∆°n ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m");
        }

        for (HoaDonChiTiet chiTiet : hoaDon.getHoaDonChiTiets()) {
            if (chiTiet.getSoLuong() == null || chiTiet.getSoLuong() <= 0) {
                throw new IllegalArgumentException("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
            }
            if (chiTiet.getSanPhamChiTiet() == null ||
                    chiTiet.getSanPhamChiTiet().getGia() == null ||
                    chiTiet.getSanPhamChiTiet().getGia().compareTo(BigDecimal.ZERO) < 0) {
                throw new IllegalArgumentException("Th√¥ng tin gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
            }
        }
    }

    private Cell createHeaderCell(String content) {
        return new Cell()
                .add(new Paragraph(content))
                .setBold()
                .setPadding(2)
                .setTextAlignment(TextAlignment.CENTER)
                .setBackgroundColor(com.itextpdf.kernel.colors.ColorConstants.LIGHT_GRAY);
    }

    private Cell createCell(String content, boolean isHeader) {
        Cell cell = new Cell().add(new Paragraph(content));
        if (isHeader) {
            cell.setBold(); // ƒê·∫≠m ch·ªØ cho ti√™u ƒë·ªÅ
        }
        return cell
                .setPadding(2)
                .setTextAlignment(TextAlignment.LEFT);
    }
    //
    public byte[] generateDeliveryInvoicePDF(HoaDon hoaDon) {
        validateInvoiceData(hoaDon);

        try {
            String tempFile = "delivery_invoice_" + hoaDon.getId() + ".pdf";
            PdfWriter writer = new PdfWriter(tempFile);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);
            document.setMargins(5, 5, 5, 5); // C·ª±c k·ª≥ m·ªèng

            // Set up font
            InputStream fontStream = getClass().getResourceAsStream("/fonts/NotoSans-VariableFont_wdth,wght.ttf");
            if (fontStream == null) {
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y font file");
            }
            PdfFont font = PdfFontFactory.createFont(
                    IOUtils.toByteArray(fontStream),
                    PdfEncodings.IDENTITY_H
            );
            document.setFont(font);

            // Calculate all amounts first (reuse same logic as invoice)
            InvoiceAmounts amounts = calculateInvoiceAmounts(hoaDon);

            // Header with logo and barcode
            addDeliveryHeader(document, hoaDon, pdf);

            // Sender and receiver information
            addDeliverySenderReceiverInfo(document, hoaDon);

            // Order information
            addDeliveryOrderInfo(document, hoaDon);

            // Product simplified list - without table
            addSimplifiedProductList(document, hoaDon);

            // Payment details - truy·ªÅn th√™m hoaDon ƒë·ªÉ x·ª≠ l√Ω chi ti·∫øt thanh to√°n
            addDeliveryPaymentSummary(document, hoaDon, amounts);

            // Signature area
            addDeliverySignatureArea(document);

            document.close();
            byte[] pdfContent = Files.readAllBytes(Paths.get(tempFile));
            Files.delete(Paths.get(tempFile));
            return pdfContent;

        } catch (Exception e) {
            log.error("Error generating delivery PDF for invoice {}: ", hoaDon.getId(), e);
            throw new RuntimeException("L·ªói khi t·∫°o PDF phi·∫øu giao h√†ng", e);
        }
    }

    private void addDeliveryHeader(Document document, HoaDon hoaDon, PdfDocument pdf) {
        Table header = new Table(2);
        header.setWidth(UnitValue.createPercentValue(100));
        header.setBackgroundColor(ColorConstants.WHITE);

        // Left column - Logo and shop name
        Cell logoCell = new Cell();
        try {
            InputStream logoStream = getClass().getResourceAsStream("/images/4bee-logo4.png");
            if (logoStream != null) {
                byte[] logoBytes = IOUtils.toByteArray(logoStream);
                com.itextpdf.io.image.ImageData imageData = com.itextpdf.io.image.ImageDataFactory.create(logoBytes);
                Image logoImage = new Image(imageData);
                logoImage.setWidth(60);
                logoCell.add(logoImage);
            } else {
                logoCell.add(new Paragraph(SHOP_NAME).setBold());
            }
        } catch (Exception e) {
            logoCell.add(new Paragraph(SHOP_NAME).setBold());
        }

        logoCell.add(new Paragraph("PHI·∫æU GIAO H√ÄNG").setBold().setFontSize(12));
        logoCell.setBorder(null);
        logoCell.setPadding(2);
        header.addCell(logoCell);

        // Right column - Barcode
        Cell barcodeCell = new Cell();
        try {
            // X·ª≠ l√Ω m√£ h√≥a ƒë∆°n null
            String maHoaDon = hoaDon.getMaHoaDon();
            if (maHoaDon == null || maHoaDon.trim().isEmpty()) {
                maHoaDon = "NO_ID_" + hoaDon.getId();
            }

            com.itextpdf.barcodes.Barcode128 barcode = new com.itextpdf.barcodes.Barcode128(pdf);
            barcode.setCode(maHoaDon);
            barcode.setCodeType(com.itextpdf.barcodes.Barcode128.CODE128);
            Image barcodeImage = new Image(barcode.createFormXObject(pdf));
            barcodeImage.setWidth(150);
            barcodeImage.setHeight(30);
            barcodeCell.add(barcodeImage);
        } catch (Exception e) {
            String maHoaDon = hoaDon.getMaHoaDon() != null ? hoaDon.getMaHoaDon() : "Kh√¥ng c√≥ m√£";
            barcodeCell.add(new Paragraph(maHoaDon));
        }

        barcodeCell.setBorder(null);
        barcodeCell.setPadding(2);
        barcodeCell.setTextAlignment(TextAlignment.RIGHT);
        header.addCell(barcodeCell);

        document.add(header);
        document.add(new Paragraph("---------------------------------------------------")
                .setFontSize(7)
                .setMarginTop(2)
                .setMarginBottom(2)
                .setTextAlignment(TextAlignment.CENTER));
    }

    private void addDeliverySenderReceiverInfo(Document document, HoaDon hoaDon) {
        Table addressTable = new Table(2);
        addressTable.setWidth(UnitValue.createPercentValue(100));

        // Sender info
        Cell senderCell = new Cell();
        senderCell.add(new Paragraph("NG∆Ø·ªúI G·ª¨I:").setBold().setFontSize(10));
        senderCell.add(new Paragraph(SHOP_NAME).setFontSize(10));
        senderCell.add(new Paragraph(SHOP_ADDRESS).setFontSize(9));
        senderCell.add(new Paragraph("SƒêT: " + SHOP_PHONE).setFontSize(9));
        senderCell.setBorder(null);
        senderCell.setPadding(2);
        addressTable.addCell(senderCell);

        // Receiver info
        Cell receiverCell = new Cell();
        receiverCell.add(new Paragraph("NG∆Ø·ªúI NH·∫¨N:").setBold().setFontSize(10));

        // X·ª≠ l√Ω th√¥ng tin ng∆∞·ªùi nh·∫≠n
        String tenNguoiNhan = "Kh√°ch h√†ng l·∫ª";
        if (hoaDon.getTenNguoiNhan() != null && !hoaDon.getTenNguoiNhan().trim().isEmpty()
                && !hoaDon.getTenNguoiNhan().equalsIgnoreCase("Kh√°ch h√†ng l·∫ª")) {
            tenNguoiNhan = hoaDon.getTenNguoiNhan().trim();
        }
        receiverCell.add(new Paragraph(tenNguoiNhan).setFontSize(10));

        // X·ª≠ l√Ω s·ªë ƒëi·ªán tho·∫°i
        if (hoaDon.getSoDienThoai() != null && !hoaDon.getSoDienThoai().trim().isEmpty()) {
            receiverCell.add(new Paragraph("SƒêT: " + hoaDon.getSoDienThoai().trim()).setFontSize(9));
        }

        // ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
        if (hoaDon.getDiaChi() != null && !hoaDon.getDiaChi().trim().isEmpty()) {
            String diaChiFormatted = addressCache.getFormattedDiaChi(hoaDon.getDiaChi());
            receiverCell.add(new Paragraph(diaChiFormatted).setFontSize(9));
        }

        receiverCell.setBorder(null);
        receiverCell.setPadding(2);
        addressTable.addCell(receiverCell);

        document.add(addressTable);
    }

    private void addDeliveryOrderInfo(Document document, HoaDon hoaDon) {
        Table infoTable = new Table(2);
        infoTable.setWidth(UnitValue.createPercentValue(100));

        // Order information
        Cell orderInfoCell = new Cell();

        // X·ª≠ l√Ω m√£ h√≥a ƒë∆°n null
        String maHoaDon = "Kh√¥ng c√≥ m√£";
        if (hoaDon.getMaHoaDon() != null && !hoaDon.getMaHoaDon().trim().isEmpty()) {
            maHoaDon = hoaDon.getMaHoaDon();
        }
        orderInfoCell.add(new Paragraph("M√£ ƒë∆°n h√†ng: " + maHoaDon).setFontSize(10));

        // X·ª≠ l√Ω ng√†y t·∫°o null
        if (hoaDon.getNgayTao() != null) {
            orderInfoCell.add(new Paragraph("Ng√†y ƒë·∫∑t h√†ng: " +
                    hoaDon.getNgayTao().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))).setFontSize(9));
        }

        // X·ª≠ l√Ω ghi ch√∫ n·∫øu c√≥
        if (hoaDon.getGhiChu() != null && !hoaDon.getGhiChu().trim().isEmpty()) {
            orderInfoCell.add(new Paragraph("Ghi ch√∫: " + hoaDon.getGhiChu()).setFontSize(9));
        }

        orderInfoCell.setBorder(null);
        orderInfoCell.setPadding(2);
        infoTable.addCell(orderInfoCell);

        // COD Label if applicable
        Cell paymentCell = new Cell();

        // T√≠nh chi ti·∫øt thanh to√°n ƒë·ªÉ x√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã ch√≠nh x√°c
        PaymentDetails details = calculatePaymentDetails(hoaDon);
        boolean isCOD = isPaymentCOD(hoaDon);

        // Quy·∫øt ƒë·ªãnh lo·∫°i th√¥ng b√°o d·ª±a tr√™n t√¨nh tr·∫°ng thanh to√°n
        if (isCOD) {
            // Hi·ªÉn th·ªã s·ªë ti·ªÅn c·∫ßn thu n·∫øu l√† COD
            paymentCell.add(new Paragraph("THANH TO√ÅN KHI NH·∫¨N H√ÄNG")
                    .setBold()
                    .setFontColor(ColorConstants.WHITE)
                    .setBackgroundColor(ColorConstants.ORANGE)
                    .setFontSize(10)
                    .setPadding(2)
                    .setTextAlignment(TextAlignment.CENTER));

            // Th√™m th√¥ng tin s·ªë ti·ªÅn c·∫ßn thu
            paymentCell.add(new Paragraph(formatCurrency(details.getAmountDue()))
                    .setBold()
                    .setFontSize(10)
                    .setPadding(2)
                    .setTextAlignment(TextAlignment.CENTER));
        } else if (details.isFullyPaid()) {
            // N·∫øu ƒë√£ thanh to√°n ƒë·ªß
            paymentCell.add(new Paragraph("ƒê√É THANH TO√ÅN")
                    .setBold()
                    .setFontColor(ColorConstants.WHITE)
                    .setBackgroundColor(ColorConstants.GREEN)
                    .setFontSize(10)
                    .setPadding(2)
                    .setTextAlignment(TextAlignment.CENTER));
        } else {
            // ƒê√£ thanh to√°n m·ªôt ph·∫ßn nh∆∞ng kh√¥ng ph·∫£i COD
            paymentCell.add(new Paragraph("THANH TO√ÅN M·ªòT PH·∫¶N")
                    .setBold()
                    .setFontColor(ColorConstants.WHITE)
                    .setBackgroundColor(ColorConstants.BLUE)
                    .setFontSize(10)
                    .setPadding(2)
                    .setTextAlignment(TextAlignment.CENTER));

            // Hi·ªÉn th·ªã s·ªë ti·ªÅn ƒë√£ thanh to√°n / t·ªïng ti·ªÅn
            String paidInfo = formatCurrency(details.getAmountPaid()) + " / " +
                    formatCurrency(details.getTotalInvoiceAmount());
            paymentCell.add(new Paragraph(paidInfo)
                    .setFontSize(9)
                    .setPadding(2)
                    .setTextAlignment(TextAlignment.CENTER));
        }

        paymentCell.setBorder(null);
        paymentCell.setPadding(2);
        paymentCell.setTextAlignment(TextAlignment.RIGHT);
        infoTable.addCell(paymentCell);

        document.add(infoTable);
        document.add(new Paragraph("---------------------------------------------------")
                .setFontSize(7)
                .setMarginTop(2)
                .setMarginBottom(2)
                .setTextAlignment(TextAlignment.CENTER));
    }

    private void addSimplifiedProductList(Document document, HoaDon hoaDon) {
        document.add(new Paragraph("H√ÄNG H√ìA")
                .setBold()
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(10)
                .setMarginTop(0)
                .setMarginBottom(2));

        // Bo vi·ªÅn tr√™n
        document.add(new Paragraph("---------------------------------------------------")
                .setFontSize(7)
                .setMarginTop(2)
                .setMarginBottom(2)
                .setTextAlignment(TextAlignment.CENTER));

        for (HoaDonChiTiet chiTiet : hoaDon.getHoaDonChiTiets()) {
            SanPhamChiTiet spct = chiTiet.getSanPhamChiTiet();

            // L·∫•y th√¥ng tin s·∫£n ph·∫©m
            String tenSanPham = (spct.getSanPham() != null && spct.getSanPham().getTenSanPham() != null)
                    ? spct.getSanPham().getTenSanPham()
                    : "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh";

            // S·ª≠ d·ª•ng gi√° t·∫°i th·ªùi ƒëi·ªÉm th√™m n·∫øu c√≥
            BigDecimal gia = chiTiet.getGiaTaiThoiDiemThem() != null ?
                    chiTiet.getGiaTaiThoiDiemThem() : spct.getGia();

            String soLuongVaGia = "(" + chiTiet.getSoLuong() + " x " + formatCurrency(gia) + ")";

            StringBuilder attributes = new StringBuilder();
            if (spct.getMauSac() != null && spct.getMauSac().getTenMau() != null) {
                attributes.append("M√†u: ").append(spct.getMauSac().getTenMau());
            }
            if (spct.getKichThuoc() != null && spct.getKichThuoc().getTenKichThuoc() != null) {
                if (attributes.length() > 0) attributes.append(" | ");
                attributes.append("K√≠ch th∆∞·ªõc: ").append(spct.getKichThuoc().getTenKichThuoc());
            }

            // T·∫°o paragraph tr√™n 1 d√≤ng
            Paragraph productLine = new Paragraph()
                    .setFontSize(8.5f) // Thay v√¨ 9
                    .setMarginTop(0)
                    .setMarginBottom(0)
                    .setPadding(0)
                    .add(new com.itextpdf.layout.element.Text(tenSanPham + " ").setBold().setFontSize(10))
                    .add(new com.itextpdf.layout.element.Text(soLuongVaGia + " ").setFontSize(9));

            if (attributes.length() > 0) {
                productLine.add(new com.itextpdf.layout.element.Text("| " + attributes.toString()).setFontSize(9));
            }

            productLine.setTextAlignment(TextAlignment.LEFT);
            document.add(productLine);
        }

        // Bo vi·ªÅn d∆∞·ªõi
        document.add(new Paragraph("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")
                .setFontSize(8)
                .setTextAlignment(TextAlignment.CENTER));
    }


    private void addDeliveryPaymentSummary(Document document, HoaDon hoaDon, InvoiceAmounts amounts) {
        document.add(new Paragraph("TH√îNG TIN THANH TO√ÅN").setBold()
                .setFontSize(10)
                .setTextAlignment(TextAlignment.RIGHT)
                .setPaddingTop(3));

        // T√≠nh to√°n chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng thanh to√°n
        PaymentDetails paymentDetails = calculatePaymentDetails(hoaDon);

        Table summaryTable = new Table(2);
        summaryTable.setWidth(UnitValue.createPercentValue(60));
        summaryTable.setHorizontalAlignment(com.itextpdf.layout.properties.HorizontalAlignment.RIGHT);

        // Lu√¥n hi·ªÉn th·ªã t·ªïng gi√° tr·ªã ƒë∆°n h√†ng tr∆∞·ªõc
        summaryTable.addCell(createCell("T·ªïng gi√° tr·ªã ƒë∆°n h√†ng:", true)
                .setBorder(null));
        summaryTable.addCell(createCell(formatCurrency(paymentDetails.getTotalInvoiceAmount()), false)
                .setTextAlignment(TextAlignment.RIGHT)
                .setBorder(null));

        // Hi·ªÉn th·ªã chi ti·∫øt ph√¢n t√°ch n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu (uncomment n·∫øu c·∫ßn)
    /*
    summaryTable.addCell(createCell("T·ªïng ti·ªÅn h√†ng:", true)
            .setBorder(null));
    summaryTable.addCell(createCell(formatCurrency(amounts.getTongTienHang()), false)
            .setTextAlignment(TextAlignment.RIGHT)
            .setBorder(null));

    if (amounts.getTienGiamGia().compareTo(BigDecimal.ZERO) > 0) {
        summaryTable.addCell(createCell("S·ªë ti·ªÅn gi·∫£m:", true)
                .setBorder(null));
        summaryTable.addCell(createCell("-" + formatCurrency(amounts.getTienGiamGia()), false)
                .setTextAlignment(TextAlignment.RIGHT)
                .setBorder(null));
    }

    if (amounts.getPhiVanChuyen().compareTo(BigDecimal.ZERO) > 0) {
        summaryTable.addCell(createCell("Ph√≠ v·∫≠n chuy·ªÉn:", true)
                .setBorder(null));
        summaryTable.addCell(createCell(formatCurrency(amounts.getPhiVanChuyen()), false)
                .setTextAlignment(TextAlignment.RIGHT)
                .setBorder(null));
    }
    */

        // Hi·ªÉn th·ªã ƒë√£ thanh to√°n tr∆∞·ªõc n·∫øu c√≥
        if (paymentDetails.getAmountPaid().compareTo(BigDecimal.ZERO) > 0) {
            summaryTable.addCell(createCell("ƒê√£ thanh to√°n:", true)
                    .setBorder(null));
            summaryTable.addCell(createCell(formatCurrency(paymentDetails.getAmountPaid()), false)
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setBorder(null));
        }

        // Hi·ªÉn th·ªã ho√†n ti·ªÅn n·∫øu c√≥
        if (paymentDetails.hasRefund()) {
            summaryTable.addCell(createCell("ƒê√£ ho√†n ti·ªÅn:", true)
                    .setBorder(null));
            summaryTable.addCell(createCell(formatCurrency(paymentDetails.getAmountRefunded()), false)
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setBorder(null));
        }

        // Hi·ªÉn th·ªã s·ªë ti·ªÅn c·∫ßn thu n·∫øu c√≥
        if (isPaymentCOD(hoaDon) && paymentDetails.getAmountDue().compareTo(BigDecimal.ZERO) > 0) {
            summaryTable.addCell(createCell("Ti·ªÅn thu ng∆∞·ªùi nh·∫≠n:", true)
                    .setBorder(null)
                    .setBold());
            summaryTable.addCell(createCell(formatCurrency(paymentDetails.getAmountDue()), false)
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setBorder(null)
                    .setBold());

            // Th√™m ch√∫ th√≠ch nh·ªè
            Cell noteCell = new Cell(1, 2)
                    .add(new Paragraph("(ƒê√£ bao g·ªìm ph√≠ v·∫≠n chuy·ªÉn c≈©ng nh∆∞ gi·∫£m gi√°)")
                            .setFontSize(7)
                            .setItalic()
                            .setTextAlignment(TextAlignment.RIGHT))
                    .setBorder(null)
                    .setPaddingTop(0)
                    .setPaddingBottom(2);
            summaryTable.addCell(noteCell);
        }

        document.add(summaryTable);
    }

    private void addDeliverySignatureArea(Document document) {
        document.add(new Paragraph("---------------------------------------------------")
                .setFontSize(7)
                .setMarginTop(2)
                .setMarginBottom(2)
                .setTextAlignment(TextAlignment.CENTER));

        Table signatureTable = new Table(2);
        signatureTable.setWidth(UnitValue.createPercentValue(100));

        Cell shopSignCell = new Cell();
        shopSignCell.add(new Paragraph("Ch·ªØ k√Ω ng∆∞·ªùi g·ª≠i").setFontSize(9).setTextAlignment(TextAlignment.CENTER));
        shopSignCell.add(new Paragraph("\n\n").setFontSize(9));
        shopSignCell.setBorder(null);
        shopSignCell.setPadding(2);
        signatureTable.addCell(shopSignCell);

        Cell customerSignCell = new Cell();
        customerSignCell.add(new Paragraph("Ch·ªØ k√Ω ng∆∞·ªùi nh·∫≠n").setFontSize(9).setTextAlignment(TextAlignment.CENTER));
        customerSignCell.add(new Paragraph("(X√°c nh·∫≠n h√†ng nguy√™n v·∫πn, kh√¥ng b√≥c m·ªü)").setFontSize(8).setTextAlignment(TextAlignment.CENTER));
        customerSignCell.add(new Paragraph("\n\n").setFontSize(9));
        customerSignCell.setBorder(null);
        customerSignCell.setPadding(2);
        signatureTable.addCell(customerSignCell);

        document.add(signatureTable);

        // Policy note at bottom
        document.add(new Paragraph("N·∫øu c√≥ v·∫•n ƒë·ªÅ c·∫ßn shop h·ªó tr·ª£ h√£y li√™n h√£y li√™n h·ªá qua th√¥ng tin b√™n d∆∞·ªõi. C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ mua h√†ng")
                .setFontSize(8)
                .setTextAlignment(TextAlignment.CENTER));

        document.add(new Paragraph("Hotline: " + SHOP_PHONE)
                .setFontSize(8)
                .setTextAlignment(TextAlignment.CENTER));
    }
    /**
     * Class l∆∞u tr·ªØ chi ti·∫øt t√¨nh tr·∫°ng thanh to√°n c·ªßa h√≥a ƒë∆°n
     */
    @Data
    @AllArgsConstructor
    private static class PaymentDetails {
        private BigDecimal totalInvoiceAmount;    // T·ªïng gi√° tr·ªã h√≥a ƒë∆°n
        private BigDecimal amountPaid;            // T·ªïng ƒë√£ thanh to√°n
        private BigDecimal amountRefunded;        // T·ªïng ƒë√£ ho√†n ti·ªÅn
        private BigDecimal amountDue;             // S·ªë ti·ªÅn c√≤n ph·∫£i thu

        /**
         * Ki·ªÉm tra xem h√≥a ƒë∆°n ƒë√£ thanh to√°n ƒë·ªß ch∆∞a
         */
        public boolean isFullyPaid() {
            return amountDue.compareTo(BigDecimal.ZERO) <= 0;
        }

        /**
         * Ki·ªÉm tra xem h√≥a ƒë∆°n c√≥ ho√†n ti·ªÅn kh√¥ng
         */
        public boolean hasRefund() {
            return amountRefunded.compareTo(BigDecimal.ZERO) > 0;
        }
    }

    /**
     * T√≠nh to√°n chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng thanh to√°n c·ªßa h√≥a ƒë∆°n
     */
    private PaymentDetails calculatePaymentDetails(HoaDon hoaDon) {
        log.debug("Ki·ªÉm tra t√≠nh to√°n: T·ªïng ti·ªÅn = {}, Ph√≠ v·∫≠n chuy·ªÉn = {}",
                formatCurrency(hoaDon.getTongTien()),
                hoaDon.getPhiVanChuyen() != null ? formatCurrency(hoaDon.getPhiVanChuyen()) : "0 VNƒê");

        // L·∫•y t·ªïng ti·ªÅn (ch·ªâ bao g·ªìm t·ªïng ti·ªÅn h√†ng sau gi·∫£m gi√°)
        BigDecimal tongTienSanPham = hoaDon.getTongTien() != null ? hoaDon.getTongTien() : BigDecimal.ZERO;

        // L·∫•y ph√≠ v·∫≠n chuy·ªÉn
        BigDecimal phiVanChuyen = hoaDon.getPhiVanChuyen() != null ? hoaDon.getPhiVanChuyen() : BigDecimal.ZERO;

        // T√≠nh t·ªïng th√†nh to√°n = t·ªïng ti·ªÅn s·∫£n ph·∫©m + ph√≠ v·∫≠n chuy·ªÉn
        BigDecimal totalAmount = tongTienSanPham.add(phiVanChuyen);

        BigDecimal totalPaid = BigDecimal.ZERO;
        BigDecimal totalRefunded = BigDecimal.ZERO;

        // Ph·∫ßn code x·ª≠ l√Ω c√°c thanh to√°n v√† ho√†n ti·ªÅn gi·ªØ nguy√™n
        if (hoaDon.getThanhToanHoaDons() != null && !hoaDon.getThanhToanHoaDons().isEmpty()) {
            for (ThanhToanHoaDon payment : hoaDon.getThanhToanHoaDons()) {
                if (payment.getTrangThai() == PaymentConstant.PAYMENT_STATUS_PAID) {
                    totalPaid = totalPaid.add(payment.getSoTien());
                } else if (payment.getTrangThai() == PaymentConstant.PAYMENT_STATUS_REFUND) {
                    totalRefunded = totalRefunded.add(payment.getSoTien());
                }
            }
        }

        // T√≠nh s·ªë ti·ªÅn c√≤n ph·∫£i thu = T·ªïng ti·ªÅn - (ƒê√£ thanh to√°n - ƒê√£ ho√†n ti·ªÅn)
        BigDecimal netPaid = totalPaid.subtract(totalRefunded);
        BigDecimal amountDue = totalAmount.subtract(netPaid);

        // L√†m tr√≤n ƒë·ªÉ tr√°nh sai s·ªë th·∫≠p ph√¢n
        if (amountDue.abs().compareTo(new BigDecimal("0.01")) < 0) {
            amountDue = BigDecimal.ZERO;
        }

        log.debug("Chi ti·∫øt thanh to√°n c·ªßa h√≥a ƒë∆°n {}: T·ªïng h√†ng={}, Ph√≠ ship={}, T·ªïng c·∫ßn TT={}, ƒê√£ TT={}, ƒê√£ ho√†n={}, C√≤n ph·∫£i thu={}",
                hoaDon.getMaHoaDon(),
                formatCurrency(tongTienSanPham),
                formatCurrency(phiVanChuyen),
                formatCurrency(totalAmount),
                formatCurrency(totalPaid),
                formatCurrency(totalRefunded),
                formatCurrency(amountDue));

        return new PaymentDetails(totalAmount, totalPaid, totalRefunded, amountDue);
    }

    /**
     * Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ph·∫£i thanh to√°n COD kh√¥ng
     */
    /**
     * Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ph·∫£i thanh to√°n COD kh√¥ng d·ª±a tr√™n t√¨nh tr·∫°ng thanh to√°n th·ª±c t·∫ø
     * X·ª≠ l√Ω c·∫£ ƒë∆°n giao h√†ng (loaiHoaDon=3) v√† ƒë∆°n t·∫°i qu·∫ßy (loaiHoaDon=1)
     */
    private boolean isPaymentCOD(HoaDon hoaDon) {
        // Ch·ªâ x√©t ƒë∆°n giao h√†ng ho·∫∑c ƒë∆°n t·∫°i qu·∫ßy
        if (hoaDon.getLoaiHoaDon() != 3 && hoaDon.getLoaiHoaDon() != 1) {
            return false;
        }

        // T√≠nh chi ti·∫øt thanh to√°n
        PaymentDetails details = calculatePaymentDetails(hoaDon);

        // N·∫øu ƒë√£ thanh to√°n ƒë·ªß, kh√¥ng ph·∫£i COD
        if (details.isFullyPaid()) {
            return false;
        }

        // N·∫øu c√≤n ti·ªÅn ph·∫£i thu, ki·ªÉm tra xem c√≥ thanh to√°n n√†o ki·ªÉu COD kh√¥ng
        if (details.getAmountDue().compareTo(BigDecimal.ZERO) > 0) {
            // Ki·ªÉm tra n·∫øu c√≥ ph∆∞∆°ng th·ª©c thanh to√°n COD
            boolean hasCodPaymentMethod = false;

            if (hoaDon.getThanhToanHoaDons() != null && !hoaDon.getThanhToanHoaDons().isEmpty()) {
                for (ThanhToanHoaDon payment : hoaDon.getThanhToanHoaDons()) {
                    if (payment.getPhuongThucThanhToan() != null) {
                        // Ki·ªÉm tra b·∫±ng c·∫£ id v√† m√£ ph∆∞∆°ng th·ª©c ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªè s√≥t
                        if (PaymentConstant.PAYMENT_METHOD_COD.equals(payment.getPhuongThucThanhToan().getId()) ||
                                "COD".equals(payment.getPhuongThucThanhToan().getMaPhuongThucThanhToan())) {
                            hasCodPaymentMethod = true;
                            break;
                        }
                    }
                }

                // N·∫øu c√≥ ph∆∞∆°ng th·ª©c COD
                if (hasCodPaymentMethod) {
                    return true;
                }

                // N·∫øu l√† ƒë∆°n giao h√†ng v√† ch∆∞a c√≥ ph∆∞∆°ng th·ª©c thanh to√°n, coi nh∆∞ l√† COD
                if (hoaDon.getLoaiHoaDon() == 3) {
                    // Ki·ªÉm tra xem c√≥ ph∆∞∆°ng th·ª©c thanh to√°n n√†o kh√°c ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng ch∆∞a
                    boolean hasOtherPaymentMethod = hoaDon.getThanhToanHoaDons().stream()
                            .anyMatch(p -> p.getTrangThai() == PaymentConstant.PAYMENT_STATUS_PAID);

                    // N·∫øu kh√¥ng c√≥ ph∆∞∆°ng th·ª©c thanh to√°n n√†o kh√°c ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng, coi nh∆∞ l√† COD
                    return !hasOtherPaymentMethod;
                }
            } else {
                // N·∫øu l√† ƒë∆°n giao h√†ng v√† kh√¥ng c√≥ th√¥ng tin thanh to√°n n√†o, coi nh∆∞ l√† COD
                return hoaDon.getLoaiHoaDon() == 3;
            }
        }

        // M·∫∑c ƒë·ªãnh kh√¥ng ph·∫£i COD
        return false;
    }

    private String formatCurrency(BigDecimal amount) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(amount) + " VNƒê";
    }
}

